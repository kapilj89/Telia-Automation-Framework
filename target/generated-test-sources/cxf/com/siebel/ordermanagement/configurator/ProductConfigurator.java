package com.siebel.ordermanagement.configurator;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.7
 * 2020-01-27T16:35:58.907+05:30
 * Generated source version: 3.2.7
 *
 */
@WebServiceClient(name = "ProductConfigurator",
                  wsdlLocation = "file:/C:/Siebel_20.1/telia-automation-framework/siebel-api-test/src/test/resources/wsdlfiles/ProductConfigurator.WSDL",
                  targetNamespace = "http://siebel.com/OrderManagement/Configurator")
public class ProductConfigurator extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://siebel.com/OrderManagement/Configurator", "ProductConfigurator");
    public final static QName BeginConfigurationPort = new QName("http://siebel.com/OrderManagement/Configurator", "BeginConfigurationPort");
    public final static QName UpdateConfigurationPort = new QName("http://siebel.com/OrderManagement/Configurator", "UpdateConfigurationPort");
    public final static QName EndConfigurationPort = new QName("http://siebel.com/OrderManagement/Configurator", "EndConfigurationPort");
    public final static QName CfgObjectBrokerPort = new QName("http://siebel.com/OrderManagement/Configurator", "CfgObjectBrokerPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Siebel_20.1/telia-automation-framework/siebel-api-test/src/test/resources/wsdlfiles/ProductConfigurator.WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ProductConfigurator.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Siebel_20.1/telia-automation-framework/siebel-api-test/src/test/resources/wsdlfiles/ProductConfigurator.WSDL");
        }
        WSDL_LOCATION = url;
    }

    public ProductConfigurator(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ProductConfigurator(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ProductConfigurator() {
        super(WSDL_LOCATION, SERVICE);
    }

    public ProductConfigurator(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ProductConfigurator(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ProductConfigurator(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns BeginConfigurationPort
     */
    @WebEndpoint(name = "BeginConfigurationPort")
    public BeginConfigurationPort getBeginConfigurationPort() {
        return super.getPort(BeginConfigurationPort, BeginConfigurationPort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BeginConfigurationPort
     */
    @WebEndpoint(name = "BeginConfigurationPort")
    public BeginConfigurationPort getBeginConfigurationPort(WebServiceFeature... features) {
        return super.getPort(BeginConfigurationPort, BeginConfigurationPort.class, features);
    }


    /**
     *
     * @return
     *     returns UpdateConfigurationPort
     */
    @WebEndpoint(name = "UpdateConfigurationPort")
    public UpdateConfigurationPort getUpdateConfigurationPort() {
        return super.getPort(UpdateConfigurationPort, UpdateConfigurationPort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UpdateConfigurationPort
     */
    @WebEndpoint(name = "UpdateConfigurationPort")
    public UpdateConfigurationPort getUpdateConfigurationPort(WebServiceFeature... features) {
        return super.getPort(UpdateConfigurationPort, UpdateConfigurationPort.class, features);
    }


    /**
     *
     * @return
     *     returns EndConfigurationPort
     */
    @WebEndpoint(name = "EndConfigurationPort")
    public EndConfigurationPort getEndConfigurationPort() {
        return super.getPort(EndConfigurationPort, EndConfigurationPort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EndConfigurationPort
     */
    @WebEndpoint(name = "EndConfigurationPort")
    public EndConfigurationPort getEndConfigurationPort(WebServiceFeature... features) {
        return super.getPort(EndConfigurationPort, EndConfigurationPort.class, features);
    }


    /**
     *
     * @return
     *     returns CfgObjectBrokerPort
     */
    @WebEndpoint(name = "CfgObjectBrokerPort")
    public CfgObjectBrokerPort getCfgObjectBrokerPort() {
        return super.getPort(CfgObjectBrokerPort, CfgObjectBrokerPort.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CfgObjectBrokerPort
     */
    @WebEndpoint(name = "CfgObjectBrokerPort")
    public CfgObjectBrokerPort getCfgObjectBrokerPort(WebServiceFeature... features) {
        return super.getPort(CfgObjectBrokerPort, CfgObjectBrokerPort.class, features);
    }

}
